RealPage Take Home Assignment 
 
 
Problem Statement: 
Build a Gen AI powered conversational bot that uses the IMDB dataset to answer various questions.  
Constraints: 
	• Use Open AI or Gemini API key of an LLM of your choice. (Instructions shared) 
			§ If you wish to use an LLM of your choice outside of Open AI/Gemini, you'll have to provide API key for testing. 
	• The final code should be shared in a zipped folder or a GitHub link that can be run locally.  
			§ Please provide your API key for testing if using paid LLMs. 
	• If familiar, use the streamlit app for Chat UI or any other UI app of choice.  
	• If you use a db or vector store, please share the local db/vectorstore file.   
	• Provide instructions to run the code and the model used. 

	  
Dataset: imdb_dataset.zip 
	• Poster_Link - Link of the poster that imdb using 
	• Series_Title = Name of the movie 
	• Released_Year - Year at which that movie released 
	• Certificate - Certificate earned by that movie 
	• Runtime - Total runtime of the movie 
	• Genre - Genre of the movie 
	• IMDB_Rating - Rating of the movie at IMDB site 
	• Overview - mini story/ summary 
	• Meta_score - Score earned by the movie 
	• Director - Name of the Director 
	• Star1, Star2, Star3, Star4 - Name of the Stars 
	• No_of_votes - Total number of votes 
	• Gross - Money earned by that movie 

  
Test Questions (not limited to): 
	1. When did The Matrix release?  
	2. What are the top 5 movies of 2019 by meta score? 
	3. Top 7 comedy movies between 2010-2020 by imdb rating? 
	4. Top horror movies with a meta score above 85 and imdb rating above 8 
	5. Top directors and their highest grossing movies with gross earnings of greater than 500M at least twice. 
	6. Top 10 movies with over 1M votes but lower gross earnings. 
	7. List of movies from the comedy genre where there is death or dead people involved. (Hint: Use Overview column) 
	8. Summarize the movie plots of Steven Spielberg’s top-rated sci-fi movies. 
 

Acquiring an API Key:
In order to build a system which uses generative AI to answer the questions above, you will need access to a large language model (LLM).  
This link contains information about various LLM providers offering free APIs. Take note of the token and daily request limits. We suggest using Google AI Services, but any API will do. 
 
Google AI Services API:
	1. Go to https://aistudio.google.com/apikey and login with your account. 
	2. Click on the blue ‘Get API Key’ button on the left pane of the page 
	3. Click the ‘Create API Key’ button  
	4. A box will appear containing an API key. Copy it and save it in a place you will remember. 
	 
Using the Google AI Services API Key:
 
	1. In a terminal, create an environment variable for the API key you created: 
		`export GOOGLE_API_KEY=<your api key>` 
	2. Create a new python environment with `conda create –n llm_api python=3.12` 
	3. `conda activate llm_api` 
	4. To use google-generativeai package 
		`pip install -q -U google-generativeai` 
	5. To use langchain 
		`pip install -qU langchain-google-genai` 
	6. The following script can invoke the model using ‘requests’ and retrieve a response using both approaches 
	 
import json 
import os 
import google.generativeai as genai 
from langchain_google_genai import ChatGoogleGenerativeAI 
 
# See https://aistudio.google.com/apikey 
 
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY', '') 
 
def invoke_with_ai_studio_api(prompt: str) -> str: 
    genai.configure(api_key=GOOGLE_API_KEY) 
    model = genai.GenerativeModel("gemini-1.5-flash") 
    response = model.generate_content(prompt) 
    return response.text 
 
def invoke_with_langchain(prompt: str) -> dict: 
     
    llm = ChatGoogleGenerativeAI( 
        model="gemini-1.5-flash", #model of your choice from gemini
        temperature=0, 
        max_tokens=10, 
        timeout=None, 
        max_retries=2, 
    ) 
    messages = [ 
        ( 
            "system", 
            "You are an expert in explaining topics in computer science. When the human asks for explanations, give accessible and informative responses.", 
        ), 
        ("human", prompt), 
    ] 
    response = llm.invoke(messages) 
    return response 
 
def main(): 
    print(invoke_with_langchain("Explain how AI works")) 
     
 
if __name__ == '__main__': 
    main() 
	 

Reference: 
https://ai.google.dev/gemini-api/docs/quickstart?lang=python 
https://python.langchain.com/docs/integrations/chat/google_generative_ai/ 
